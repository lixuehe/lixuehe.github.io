I"K5<h1 id="ecmascript-6-简介">ECMAScript 6 简介</h1>

<h3 id="一ecmascript-60以下简称-es6">一.ECMAScript 6.0（以下简称 ES6）</h3>

<ul>
  <li>
    <p>是 JavaScript 语言的下一代标准;</p>
  </li>
  <li>
    <p>ECMAScript 和 JavaScript 的关系是:ECMAScript 6.0（以下简称 ES6）是 JavaScript 语言的下一代标准，前者是后者的规格，后者是前者的一种实现（另外的 ECMAScript 方言还有 JScript 和 ActionScript）。日常场合，这两个词是可以互换的。</p>
  </li>
</ul>

<h3 id="二查看部署进度">二.查看部署进度</h3>

<ul>
  <li>
    <p>查看 Node 已经实现的 ES6 特性:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>node <span class="nt">--v8-options</span> | <span class="nb">grep </span>harmony
</code></pre></div>    </div>
  </li>
  <li>
    <p><a href="http://ruanyf.github.io/es-checker">ruanyf.github.io/es-checker</a>，查看浏览器支持 ES6 的程度；</p>
  </li>
  <li>
    <p>查看你正在使用的 Node 环境对 ES6 的支持程度</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>npm <span class="nb">install</span> <span class="nt">-g</span> es-checker
<span class="nv">$ </span>es-checker
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="三babel转码器将-es6-代码转为-es5-代码">三.Babel转码器：将 ES6 代码转为 ES5 代码</h3>

<ol>
  <li>
    <p>在项目目录中，安装 Babel</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>npm <span class="nb">install</span> <span class="nt">--save-dev</span> @babel/core
</code></pre></div>    </div>
  </li>
  <li>
    <p>配置文件.babelrc,存放在项目的根目录下，用来设置转码规则和插件，基本格式如下:</p>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
  <span class="dl">"</span><span class="s2">presets</span><span class="dl">"</span><span class="p">:</span> <span class="p">[],</span>
  <span class="dl">"</span><span class="s2">plugins</span><span class="dl">"</span><span class="p">:</span> <span class="p">[]</span>
<span class="p">}</span>
</code></pre></div>    </div>

    <p><code class="highlighter-rouge">presets</code>字段设定转码规则，官方提供以下的规则集，你可以根据需要安装:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 最新转码规则</span>
<span class="nv">$ </span>npm <span class="nb">install</span> <span class="nt">--save-dev</span> @babel/preset-env
   
<span class="c"># react 转码规则</span>
<span class="nv">$ </span>npm <span class="nb">install</span> <span class="nt">--save-dev</span> @babel/preset-react
</code></pre></div>    </div>

    <p>然后，将这些规则加入<code class="highlighter-rouge">.babelrc</code>。</p>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="p">{</span>
    <span class="dl">"</span><span class="s2">presets</span><span class="dl">"</span><span class="p">:</span> <span class="p">[</span>
      <span class="dl">"</span><span class="s2">@babel/env</span><span class="dl">"</span><span class="p">,</span>
      <span class="dl">"</span><span class="s2">@babel/preset-react</span><span class="dl">"</span>
    <span class="p">],</span>
    <span class="dl">"</span><span class="s2">plugins</span><span class="dl">"</span><span class="p">:</span> <span class="p">[]</span>
  <span class="p">}</span>
</code></pre></div>    </div>

    <h3 id="四命令行转码命令行工具babelcli">四.命令行转码–命令行工具<code class="highlighter-rouge">@babel/cli</code></h3>

    <ol>
      <li>
        <p>安装命令：</p>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>npm <span class="nb">install</span> <span class="nt">--save-dev</span> @babel/cli
</code></pre></div>        </div>
      </li>
      <li>
        <p>基本用法</p>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 转码结果输出到标准输出</span>
<span class="nv">$ </span>npx babel example.js
      
<span class="c"># 转码结果写入一个文件</span>
<span class="c"># --out-file 或 -o 参数指定输出文件</span>
<span class="nv">$ </span>npx babel example.js <span class="nt">--out-file</span> compiled.js
<span class="c"># 或者</span>
<span class="nv">$ </span>npx babel example.js <span class="nt">-o</span> compiled.js
      
<span class="c"># 整个目录转码</span>
<span class="c"># --out-dir 或 -d 参数指定输出目录</span>
<span class="nv">$ </span>npx babel src <span class="nt">--out-dir</span> lib
<span class="c"># 或者</span>
<span class="nv">$ </span>npx babel src <span class="nt">-d</span> lib
      
<span class="c"># -s 参数生成source map文件</span>
<span class="nv">$ </span>npx babel src <span class="nt">-d</span> lib <span class="nt">-s</span>
</code></pre></div>        </div>
      </li>
    </ol>
  </li>
</ol>

<h2 id="一-let-和-const-命令">一. let 和 const 命令</h2>

<h3 id="1let-命令">1.let 命令</h3>

<ul>
  <li>
    <p>用于声明变量,所声明的变量，只在<code class="highlighter-rouge">let</code>命令所在的代码块内有效；</p>

    <p>案例：</p>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var a = [];
for (var i = 0; i &lt; 10; i++) {
  a[i] = function () {
    console.log(i);
  };
}
a[6](); // 10
-----------------------------
var a = [];
for (let i = 0; i &lt; 10; i++) {
  a[i] = function () {
    console.log(i);
  };
}
a[6](); // 6
</code></pre></div>    </div>

    <p><strong><code class="highlighter-rouge">for</code>循环还有一个特别之处，就是设置循环变量的那部分是一个父作用域，而循环体内部是一个单独的子作用域。</strong></p>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>for (let i = 0; i &lt; 3; i++) {
  let i = 'abc';
  console.log(i);
}
// abc  abc abc
//输出了 3 次abc,这表明函数内部的变量i与循环变量i不在同一个作用域，有各自单独的作用域。
</code></pre></div>    </div>
  </li>
  <li>
    <p>不存在变量提升：所声明的变量一定要在声明后使用，否则报错；</p>
  </li>
  <li>
    <p>暂时性死区：</p>

    <ul>
      <li>
        <p>在代码块内，使用<code class="highlighter-rouge">let</code>命令声明变量之前，该变量都是不可用的。这在语法上，称为“暂时性死区”（temporal dead zone，简称 TDZ）。</p>
      </li>
      <li>
        <p>只要块级作用域内存在<code class="highlighter-rouge">let</code>命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响。</p>
      </li>
      <li>
        <p>ES6 明确规定，如果区块中存在<code class="highlighter-rouge">let</code>和<code class="highlighter-rouge">const</code>命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。</p>
      </li>
      <li>
        <p>暂时性死区的本质就是，只要一进入当前作用域，所要使用的变量就已经存在了，但是不可获取，只有等到声明变量的那一行代码出现，才可以获取和使用该变量。</p>
      </li>
    </ul>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var tmp =123;
if(true){
    // tmp='abc';        //ReferenceError: tmp is not defined
    // console.log(tmp); //ReferenceError: tmp is not defined
    let tmp;
    console.log(tmp);    //undefined
    tmp=123;
    console.log(tmp);    //123
}
</code></pre></div>    </div>
  </li>
  <li>
    <p>不允许重复声明：<code class="highlighter-rouge">let</code>不允许在相同作用域内，重复声明同一个变量，不能在函数内部重新声明参数。</p>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// 报错
function func() {
  let a = 10;
  let a = 1;
}
-----------------------
function func(arg) {
  let arg;
}
func() // 报错
  
function func(arg) {
  {
    let arg;
  }
}
func() // 不报错
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="2块级作用域">2.块级作用域</h3>

<ul>
  <li>
    <p>为什么需要块级作用域？</p>

    <ul>
      <li>
        <p>第一种场景，内层变量可能会覆盖外层变量。</p>

        <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">tmp</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">();</span>
    
<span class="kd">function</span> <span class="nx">f</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">tmp</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">tmp</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">hello world</span><span class="dl">'</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="nx">f</span><span class="p">();</span> <span class="c1">// undefined  变量提升，导致内层的tmp变量覆盖了外层的tmp变量。</span>
</code></pre></div>        </div>
      </li>
      <li>
        <p>第二种场景，用来计数的循环变量泄露为全局变量。</p>

        <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">s</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">hello</span><span class="dl">'</span><span class="p">;</span>
    
<span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">s</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">s</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
<span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span> <span class="c1">// 5</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>
    <p>ES6的块级作用域：</p>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>function f1(){
    let n=5;
    if(true){
        let n=10;
        console.log(n);//10
    }
    console.log(n);//5
}
f1();  // 10  5
-----------------------------
f1();  // 10  10
function f1(){
    var n=5;
    if(true){
        var n=10;
        console.log(n);//10
    }
    console.log(n);//10
}
f1();  // 10  10
</code></pre></div>    </div>
  </li>
  <li>
    <p>let 的块级作用域，代替了匿名函数表达式（匿名 IIFE）</p>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// IIFE 写法
(function () {
    var tmp1 = 123;
    console.log(tmp1);    //123
}());
    // console.log(tmp1); //报错
// 块级作用域写法
{
    let tmp2 = 456;
    console.log(tmp2);  //456
}
    console.log(tmp2);  //报错
{
    var tmp3 = 789;
    console.log(tmp3); //789
}
    console.log(tmp3);  //789
</code></pre></div>    </div>
  </li>
  <li>
    <p>块级作用域与函数声明</p>

    <ul>
      <li>允许在块级作用域之中声明函数;</li>
      <li>块级作用域之中，函数声明语句的行为类似于<code class="highlighter-rouge">let</code>，在块级作用域之外不可引用。</li>
    </ul>
  </li>
  <li>
    <p>规则：</p>

    <ul>
      <li>允许在块级作用域内声明函数;</li>
      <li>函数声明类似于<code class="highlighter-rouge">var</code>，即会提升到全局作用域或函数作用域的头部;</li>
      <li>函数声明还会提升到所在的块级作用域的头部。</li>
    </ul>

    <p>案例：</p>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
    let a = 'secret';
    console.log(f());  //secret，函数被提升
    function f() {
      return a;
    }
    console.log(f()); //secret
}
    console.log(f());  //secret  
    
  // 块级作用域内部，优先使用函数表达式
  {
    let a = 'secret';
    let f = function () {
      return a;
    };
    console.log(a);  //secret
  }
    // console.log(a);//报错
</code></pre></div>    </div>
  </li>
  <li>
    <p>块级作用域必须使用大括号：{}</p>
  </li>
</ul>

:ET