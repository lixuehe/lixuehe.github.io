I"S<h2 id="linux-下的c程序">Linux 下的C程序</h2>

<h4 id="输出一个hello-word">输出一个‘’hello word!‘’</h4>

<ul>
  <li>
    <p><code class="highlighter-rouge">stdio</code>:标准输入输出流；</p>
  </li>
  <li>
    <p><code class="highlighter-rouge">\n</code>换行；</p>
  </li>
  <li>
    <p><strong>步骤：</strong></p>

    <p>​	<code class="highlighter-rouge">cd ~ /workspace/</code>–&gt;<code class="highlighter-rouge">cd lens1 </code>–&gt;<code class="highlighter-rouge">touch a.c</code>–&gt;<code class="highlighter-rouge">vi a.c</code>进行编写如下代码：</p>

    <ol>
      <li>
        <p>导入stdio (标准输入输出流)；</p>
      </li>
      <li>
        <p>编写main方法进行打印；</p>
      </li>
      <li>
        <p>代码：</p>

        <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#include &lt;stdi0.h&gt;
int  main(){
    printf("hello word!"\n);
    return 0;
}
</code></pre></div>        </div>
      </li>
      <li>
        <p>使用<code class="highlighter-rouge">wq</code>进行保存退出，进行输出：</p>
      </li>
      <li>
        <p>输入：<code class="highlighter-rouge">cc.a.c ，</code>输入<code class="highlighter-rouge">ls</code>查看，默认输出了一个a.out 文件；</p>
      </li>
      <li>
        <p><code class="highlighter-rouge">ls -l</code>查看文件权限;  r-read 可读；w-write 可写 ；x 可执行；</p>
      </li>
      <li>
        <p>执行a.out 文件：<code class="highlighter-rouge">./a.out</code>输出：”hello word“  （<code class="highlighter-rouge">./</code>：当前目录下）</p>
      </li>
    </ol>
  </li>
</ul>

<h2 id="多文件操作在vim中同时编辑多个文件">多文件操作–在vim中同时编辑多个文件</h2>

<ul>
  <li>
    <p><code class="highlighter-rouge">%d</code>：表示把数据按十进制整型输出；vi</p>
  </li>
  <li>
    <p><code class="highlighter-rouge">:set nu</code>:打开行号；</p>
  </li>
  <li>
    <p><strong>在vim 中同时创建多个源文件,步骤如下：</strong></p>

    <ol>
      <li>
        <p>在workspace下创建一个新的文件夹 <code class="highlighter-rouge">mkdir lens2</code>；</p>
      </li>
      <li>
        <p>首先编写一个hello.c文件： hello.c</p>

        <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vi.hello.c进入编辑模式：
     
#include &lt;stdio.h&gt;
int max(int a,int b){
     
    if(a&gt;b){
        return a;
    }else{
        return b;
    }
}
int main(){
     
    int a=22;
    int b=33;
    int maxNum=max(a,b);
    printf("max=%d",maxNum);
    return 0;
}
wq保存后，可查看结果` gcc hello.c--ls--&gt;./a.out--&gt;max=33
</code></pre></div>        </div>
      </li>
      <li>
        <p>再次进入<code class="highlighter-rouge">vi.hello.c</code> 命令模式下输入：<code class="highlighter-rouge">：sp max.c</code>创建一个名为max.c的文件；</p>
      </li>
      <li>
        <p>使用<code class="highlighter-rouge">Ctrl W+上下箭头</code>可切换文件位置，选在在哪里编辑；</p>
      </li>
      <li>
        <p>查看max()所占行数，8行，可将鼠标放在int max()位置处，按<code class="highlighter-rouge">8dd</code>可实现将max()函数进行剪切，然后使用<code class="highlighter-rouge">Ctrl W+上箭头</code>切换到max.c文件编辑位置，按<code class="highlighter-rouge">p</code>进行粘贴;</p>
      </li>
      <li>
        <p><code class="highlighter-rouge">wqa</code>进行保存所有并退出；</p>
      </li>
      <li>
        <p><code class="highlighter-rouge">gcc max.c hello.c -o main.out</code></p>
      </li>
      <li>
        <p>此时可查看<code class="highlighter-rouge">ls</code></p>

        <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>lixuehe@lixuehe-ThinkPad-T420:~/workspace/lens2$ ls
	a.out  hello.c  main.out  max.c
lixuehe@lixuehe-ThinkPad-T420:~/workspace/lens2$ ./main.out
	max=33lixuehe@lixuehe-ThinkPad-T420:~/workspace/lens2$ ``
</code></pre></div>        </div>

        <p>一样可以得到结果；<strong>此时的max()函数在max.c文件中；</strong></p>
      </li>
      <li>
        <p>需要在hello.c中进行声明max()函数：</p>

        <p><code class="highlighter-rouge">#include "max.c"</code>(include <系统中存在的库>；include "当前目录下寻找对应的")</系统中存在的库></p>

        <p>即可使用./a.out得到最终的输出结果；</p>
      </li>
    </ol>
  </li>
</ul>

<h2 id="多文件操作头文件与函数定义分离">多文件操作–头文件与函数定义分离</h2>

<ul>
  <li><code class="highlighter-rouge">gcc -c max.c </code>  可以生成一个名为<code class="highlighter-rouge">max.o</code> 的文件；<code class="highlighter-rouge">gcc -c max.c -o m1.o</code>并给他命名为m1.o;</li>
  <li><code class="highlighter-rouge">max.o</code>为可读可写不可执行；文件进行了编译，编译器对源代码进行了编译，编译成了计算级可识别的二进制；</li>
  <li><strong>步骤：</strong>
    <ol>
      <li><code class="highlighter-rouge">cp max.c min.c</code> 拷贝max.c 文件，名为min.c；</li>
      <li><code class="highlighter-rouge">gcc -c min.c -o min.o</code>    进行编译；</li>
      <li>修改代码内容，为输出最小数；</li>
      <li>将<strong>min.o</strong> 与<strong>max.o</strong> 编写成头文件:</li>
      <li><code class="highlighter-rouge">vi max.h</code>  –<code class="highlighter-rouge">int max(int a,int b);</code></li>
      <li><code class="highlighter-rouge">vi min.h</code> –<code class="highlighter-rouge">int min(int a,int b);</code></li>
      <li>在hello.c 中引入：
        <ol>
          <li><code class="highlighter-rouge">#include "max.h"</code></li>
          <li><code class="highlighter-rouge">#include "min.h"</code></li>
        </ol>
      </li>
      <li><code class="highlighter-rouge">gcc  max.o min.o hello.c</code> –&gt;<code class="highlighter-rouge">./a.out </code>  进行编译得到结果；</li>
    </ol>
  </li>
</ul>

<h2 id="linux-c语言makefile-的编写">Linux C语言–makeFile 的编写</h2>

<ul>
  <li>
    <p>当有多个.o文件时，进行编译，需要gcc多个.o，很麻烦，为了更方便的编译，使用make指令;</p>
  </li>
  <li>
    <p><strong>make</strong> 工具，可以将大型的开发项目，分成若干个模块，更加清晰、快捷的整理、编译源文件；</p>
  </li>
  <li>
    <p><strong>makeFile的编写步骤：</strong></p>

    <ol>
      <li>
        <p>首先将所有的<code class="highlighter-rouge">.o</code>文件进行删除  :<code class="highlighter-rouge">rm *.o</code>;</p>
      </li>
      <li>
        <p>查看是否有make ：<code class="highlighter-rouge">make -v</code>;若没有，则进行下载<code class="highlighter-rouge">sudo apt  install make</code>;</p>
      </li>
      <li>
        <p><code class="highlighter-rouge">vi makefile</code> 创建并开始便捷makefile文件；</p>
      </li>
      <li>
        <p>添加注释：<code class="highlighter-rouge">＃this is make file;</code>  # 后内容被忽略；</p>
      </li>
      <li>
        <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#this is make file
hello.out:max.o min.o hello.c
        gcc max.o min.o hello.c -o hello.out
max.o:max.c
        gcc -c max.c
min.0:min.c
        gcc -c min.c
</code></pre></div>        </div>

        <ul>
          <li><code class="highlighter-rouge">-o hello.out</code>:是将自动生成的　.out 文件进行命名；</li>
          <li>解读这段代码：我们需要最终生成一个<code class="highlighter-rouge">hello.out</code>文件，需要依赖于<code class="highlighter-rouge">max.o min.o hello.c</code>，而其中只有<code class="highlighter-rouge">hello.c</code>文件是存在的，所以又需要将另两个没有的<code class="highlighter-rouge">.o</code>文件进行编译生成；</li>
        </ul>
      </li>
      <li>
        <p><code class="highlighter-rouge">ｗｑ</code>　保存退出，输入<code class="highlighter-rouge">make</code>进行生成makefile 文件，使用ls查看,结果如下，</p>

        <p><code class="highlighter-rouge">hello.out  hello.c  makefile  max.c  max.h  max.o  min.c  min.h  min.o</code></p>
      </li>
      <li>
        <p><code class="highlighter-rouge">./hello.out</code>查看结果，也可得到最小值和最大值：</p>
      </li>
      <li>
        <p>当我们只改动<code class="highlighter-rouge">gcc max.o min.o hello.c -o hello.out</code>这一行代码时,再次<code class="highlighter-rouge">make</code>则发现，程序只执行了<code class="highlighter-rouge">gcc max.o min.o hello.c -o hello.out</code>,也就是说:</p>

        <p><strong>已经编译过的文件，如果没有修改，则不会重复编译，节省了时间；</strong></p>
      </li>
    </ol>
  </li>
</ul>

<h2 id="main-函数">main 函数</h2>

<h3 id="return--0-的作用">–return  0 的作用</h3>

<ul>
  <li>
    <p>当同时执行两部操作时，通过＆＆连接，只有第一条指令成功执行（返回值为<strong><em>0</em></strong>），才会执行下一条执行；</p>
  </li>
  <li>
    <p>通过<code class="highlighter-rouge">echo $?</code>查看执行命令是否成功：如果返回值是0，就是执行成功；如果是返回值是0以外的值，就是失败。</p>
  </li>
  <li>
    <p><strong>验证步骤：</strong></p>

    <ol>
      <li>
        <p>新建一个文件lens3 :<code class="highlighter-rouge">mkdir lens3</code>;</p>
      </li>
      <li>
        <p>在lens3下创建一个文件”main.out“:<code class="highlighter-rouge">vi main.c</code>;</p>
      </li>
      <li>
        <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#include &lt;stdio.h&gt;
int main(int argv,char* argc[])
{
    printf("hello word\n");
    return 0;
}
</code></pre></div>        </div>
      </li>
      <li>
        <p>直接执行两部操作，通过<strong>&amp;&amp;</strong>链接：<code class="highlighter-rouge">gcc main.c -o main.out &amp;&amp; ./main.out</code>
得到结果：”hello word“；</p>
      </li>
      <li>
        <p>查看是否执行成功：<code class="highlighter-rouge">echo $?</code>　输出为０，代表执行成功；</p>
      </li>
      <li>
        <p>将”main.c“中的返回值进行修改：return 101;</p>
      </li>
      <li>
        <p>重新编译：<code class="highlighter-rouge">gcc main.c -o main2.out &amp;&amp; ./main2.out</code>–&gt;得到结果还是”hello word“;<code class="highlighter-rouge">echo $?</code>查看执行结果，为101,指令没有执行成功；</p>
      </li>
      <li>
        <p>再执行<code class="highlighter-rouge">./main2.out &amp;&amp; ls</code>–&gt;得到结果还是”hello word“，没有执行ls ；</p>
      </li>
      <li><strong>所以，如果要用”＆＆“则需要前一个指令成功时必须返回０</strong>；</li>
    </ol>
  </li>
</ul>

<h3 id="main-函数的参数重点">–main 函数的参数（重点）</h3>

<p><strong>argc、argv的具体含义</strong></p>

<blockquote>
  <p>main( int argc, char* argv[] ) 中 
     第一个参数，int型的argc，为整型，用来统计程序运行时发送给main函数的命令行参数的个数，在VS中默认值为1。 
     第二个参数，char*型的argv[]，为字符串数组，用来存放指向的字符串参数的指针数组，每一个元素指向一个参数。各成员含义如下： 
     argv[0]指向程序运行的全路径名 
     argv[1]指向在DOS命令行中执行程序名后的第一个字符串 
     argv[2]指向执行程序名后的第二个字符串 
     argv[3]指向执行程序名后的第三个字符串 
     argv[argc]为NULL ./m3.out</p>
</blockquote>

<p><strong><em>举例验证：</em></strong></p>

<ol>
  <li>
    <p>新建一个<code class="highlighter-rouge">main2.c</code>文件<code class="highlighter-rouge">vi main2.c</code>;</p>
  </li>
  <li>
    <p>编辑内容：</p>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>include &lt;stdio.h&gt;
int main(int argv,char* argc[])
{
    printf("argv is %d\n",argv);
    int i;
    //不可以直接在for循环中声明变量使用，会报错；
    for(i=0;i&lt;argv;i++){
        printf("argc[%d] is %s\n",i,argc[i]);//%s是打印一个字符串
    }
    return 0;
}   
--wq保存并推出
</code></pre></div>    </div>
  </li>
  <li>
    <p><code class="highlighter-rouge">gcc main3.c -o m3.out</code>    进行编译，然后使用<code class="highlighter-rouge">ls</code>查看结果</p>
  </li>
  <li>
    <p>当输入：<code class="highlighter-rouge">./m3.out as asf af</code>时：得到入如下结果：</p>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>argv is 4
argc[0] is ./m3.out
argc[1] is as
argc[2] is asf
</code></pre></div>    </div>

    <p>*表达含义：argv is 4－－表示程序运行时发送给了”main“４个参数；</p>

    <p>　　　　　argc[0]/[1]/[2]－－表示每个参数的值；</p>
  </li>
</ol>

<h2 id="linux-c语言标准输入流输出流及错误流">Linux C语言–标准输入流、输出流及错误流</h2>

<h3 id="输入流输出流错误流基本介绍">–输入流、输出流、错误流基本介绍</h3>

<ul>
  <li>
    <p><code class="highlighter-rouge">stdin </code>     输入流：默认根据键盘输入；</p>
  </li>
  <li>
    <p><code class="highlighter-rouge">stdout </code>   输出流：默认根据显示器输出；</p>
  </li>
  <li>
    <p><code class="highlighter-rouge">stderr</code>    错误流</p>
  </li>
  <li>
    <p>举例验证：</p>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#include &lt;stdio.h&gt;
int main(){
   //printf("please input the value a :\n ")
    fprintf(stdout,"please input the value a :\n ");
    int a;
    fscanf(stdin,"%d",&amp;a);
    if(a&lt;0){
        fprintf(stderr,"the value must&gt;0");
        return 1;
    }
    return 0;
}
ｗｑ--&gt;gcc cio.c--&gt;./a.out--&gt;
</code></pre></div>    </div>
  </li>
  <li>
    <p>执行结果：
lixuehe@lixuehe-ThinkPad-T420:~/workspace/lens4$ ./a.out
<strong>please input the value a :</strong>
<strong><em>3</em></strong>
lixuehe@lixuehe-ThinkPad-T420:~/workspace/lens4$ ./a.out
<strong>please input the value a :</strong></p>

    <p><strong><em>-1</em></strong>
<strong>the value must&gt;0</strong>lixuehe@lixuehe-ThinkPad-T420:~/workspace/lens4$ vi cio.c
lixuehe@lixuehe-ThinkPad-T420:~/workspace/lens4$</p>
  </li>
</ul>

<h3 id="输入流输出流错误流的重定向">–输入流、输出流、错误流的重定向</h3>

<ul>
  <li>
    <p>“1»“输出流重定向，在原来的基础上追加新得内容；其中１可以不加</p>
  </li>
  <li>
    <p>”&gt;“输出流重定向，覆盖原来的内容，只增加本次添加的新内容；</p>
  </li>
  <li>
    <p>“２»“错误流重定向，错误内容；</p>
  </li>
  <li>
    <p>”&lt;“输入流重定向；</p>

    <h3 id="输出流重定向">输出流重定向</h3>

    <ol>
      <li>
        <p><code class="highlighter-rouge"> mkdir lens5--&gt;cd lens5--&gt;vi main.c--&gt;</code></p>

        <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#include &lt;stdio.h&gt;
int main(){
    printf("input the int value i:\n");
    int i,j;
    scanf("%d",&amp;i);
    printf("input the int value j:\n");
    scanf("%d",&amp;j);
    printf("i+j=%d\n",i+j);
    return 0;
}
wq--&gt;gcc main.c--&gt;ls./a.out
lixuehe@lixuehe-ThinkPad-T420:~/workspace/lens5$ ./a.out
   input the int value i:
   2
   input the int value j:
   3
   i+j=5
</code></pre></div>        </div>
      </li>
      <li>
        <p>测试输出流重定向及”»“与”&gt;“区别；</p>

        <p><strong>./a.out 1»a.txt</strong></p>

        <p><strong>./a.out &gt;a.txt</strong></p>

        <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>lixuehe@lixuehe-ThinkPad-T420:~/workspace/lens5$ ./a.out 1&gt;&gt;a.txt
	3
	4
lixuehe@lixuehe-ThinkPad-T420:~/workspace/lens5$ ls
	a.out  a.txt  main.c
lixuehe@lixuehe-ThinkPad-T420:~/workspace/lens5$ cat a.txt
	input the int value i:
	input the int value j:
	i+j=7
lixuehe@lixuehe-ThinkPad-T420:~/workspace/lens5$ ./a.out &gt;&gt;a.txt
	3
	6
lixuehe@lixuehe-ThinkPad-T420:~/workspace/lens5$ cat a.txt
	input the int value i:
	input the int value j:
	i+j=7
	input the int value i:
	input the int value j:
	i+j=9
lixuehe@lixuehe-ThinkPad-T420:~/workspace/lens5$ ./a.out &gt;a.txt
	6
	7
lixuehe@lixuehe-ThinkPad-T420:~/workspace/lens5$ cat a.txt
	input the int value i:
	input the int value j:
	i+j=13
</code></pre></div>        </div>
      </li>
    </ol>

    <h3 id="输入流重定向">输入流重定向</h3>

    <ol>
      <li>
        <p>首先新建一个文件可以存放提前要输入的内容：<code class="highlighter-rouge">vi input txt</code>  输入两个数字6/8</p>
      </li>
      <li>
        <p><code class="highlighter-rouge">./a.out &lt;input.txt</code>  可直接得到输出的结果：</p>

        <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>input the int value i:
input the int value j:
i+j=14
</code></pre></div>        </div>
      </li>
    </ol>
  </li>
</ul>

<h3 id="输入流输出流错误流">输入流、输出流、错误流</h3>

<ul>
  <li>
    <p>首次增加标准错误流</p>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#include &lt;stdio.h&gt;
int main(){
    printf("input the int value i:\n");
    int i,j;
    scanf("%d",&amp;i);
    printf("input the int value j:\n");
    scanf("%d",&amp;j);
    if(j!=0){
       printf("i/j=%d\n",i/j);
    }else{
        fprintf(stderr,"j!=0\n");
        return 1;
    }
    return 0;
}
wq--&gt;cc main.c--&gt;ls--&gt;./a.out
</code></pre></div>    </div>

    <ul>
      <li>进行测试：</li>
    </ul>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>lixuehe@lixuehe-ThinkPad-T420:~/workspace/lens5$ ./a.out
    input the int value i:
	1
input the int value j:
	5
	i/j=0
lixuehe@lixuehe-ThinkPad-T420:~/workspace/lens5$ ./a.out
	input the int value i:
	4
input the int value j:
	0
	j!=0
</code></pre></div>    </div>

    <ul>
      <li>当正常进行输入输出流重定向时：</li>
    </ul>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>lixuehe@lixuehe-ThinkPad-T420:~/workspace/lens5$ ./a.out 1&gt;t.txt 	2&gt;f.txt
	4
	0
lixuehe@lixuehe-ThinkPad-T420:~/workspace/lens5$ ls
	a.out  f.txt  input  main.c  t.txt
lixuehe@lixuehe-ThinkPad-T420:~/workspace/lens5$ cat t.txt
	input the int value i:
	input the int value j:
lixuehe@lixuehe-ThinkPad-T420:~/workspace/lens5$ cat f.txt
	j!=0
  
</code></pre></div>    </div>

    <ul>
      <li>当进行输入、输出、错误流重定向时：</li>
    </ul>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>lixuehe@lixuehe-ThinkPad-T420:~/workspace/lens5$ ./a.out 1&gt;t.txt 2&gt;f.txt &lt;input.txt
lixuehe@lixuehe-ThinkPad-T420:~/workspace/lens5$ ls
	a.out  f.txt  input  main.c  t.txt
lixuehe@lixuehe-ThinkPad-T420:~/workspace/lens5$ cat f.txt
	bash: input.txt: 没有那个文件或目录
lixuehe@lixuehe-ThinkPad-T420:~/workspace/lens5$ cat t.txt //输入流无结果
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="管道">管道</h2>

<ul>
  <li>
    <p>ls   查看当前目录；</p>
  </li>
  <li>
    <p>ls/  查看根目录；</p>
  </li>
  <li>
    <p>ls /etc/ 查看etc目录下的内容；</p>
  </li>
  <li>
    <table>
      <tbody>
        <tr>
          <td>ls/etc/</td>
          <td>grep ab 查看etc 下所有包含ab 的文件；</td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>
    <p>ps -e 当前运行的进程；</p>
  </li>
  <li>
    <table>
      <tbody>
        <tr>
          <td>ps -e</td>
          <td>grep ssh 当期进程有无包含ssh 的进程，如果有证明已经启动ssh ；</td>
        </tr>
      </tbody>
    </table>

    <h4 id="即为管道通过管道我们可以将etc中的内容变为输出流通过管道作为输入流传递给grep自动实现输入输出">”|“即为管道:通过管道，我们可以将etc中的内容变为输出流，通过管道，作为输入流传递给grep;自动实现输入输出；</h4>
  </li>
</ul>

<blockquote>
  <p>SSH 为 <a href="https://baike.baidu.com/item/Secure Shell">Secure Shell</a> 的缩写，由 IETF 的网络小组（Network Working Group）所制定；SSH 为建立在应用层基础上的安全协议。SSH 是目前较可靠，专为<a href="https://baike.baidu.com/item/远程登录/1071998">远程登录</a>会话和其他网络服务提供安全性的协议。利用 SSH 协议可以有效防止远程管理过程中的信息泄露问</p>
</blockquote>
:ET