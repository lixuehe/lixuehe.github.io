I"$<p>ＪS中字符串截取（slice,substring,substr）</p>

<h2 id="一使用-slice-截取">一、使用 slice() 截取</h2>

<h3 id="1函数说明">1，函数说明</h3>

<p><strong>slice()</strong> 方法可通过指定的开始和结束位置，提取字符串的某个部分，并以新的字符串返回被提取的部分。语法如下：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>`stringObject.slice(start, end)`
</code></pre></div></div>

<p><strong>参数说明：</strong></p>

<ul>
  <li>
    <p>start(必填)：从哪里开始截取；包括start值；-1指最后一个字符，－２指第二个字符，以此类推；</p>
  </li>
  <li>
    <p>end(可填):从何处结束，不包括此值，如果未填写此值，代表从start开始到结尾的所有字符；</p>
  </li>
  <li>
    <p>案例：</p>
  </li>
  <li>
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var str = "0123456789";
console.log("从索引为3的字符起一直到结束：", str.slice(3));  //3456789
console.log("从开始一直到倒数第3个字符的前一个字符：", str.slice(0,-3));  //0123456
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="二使用-substring-截取">二、使用 substring() 截取</h2>

<h3 id="1函数说明-1">1，函数说明</h3>

<p>（1）<strong>substring</strong> 方法用于提取字符串中介于两个指定下标之间的字符。语法如下：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>`stringObject.substring(start, stop)`
</code></pre></div></div>

<p><strong>参数说明：</strong></p>

<ul>
  <li>start(必填)：一个非负整数，规定提取的子串的第一个字符在stringObject中的位置；</li>
  <li>end(可选)：一个非负的整数，比要提取的子串的最后一个字符在stringObject中的位置多１；</li>
</ul>

<p>（2）注意事项：</p>

<ul>
  <li>
    <p>如果 <strong>start</strong> 与 <strong>end</strong> 相等，那么该方法返回的就是一个空串（即长度为 <strong>0</strong> 的字符串）。</p>
  </li>
  <li>
    <p>如果 <strong>start</strong> 比 <strong>end</strong> 大，那么该方法在提取子串之前会先交换这两个参数。</p>
  </li>
  <li>
    <p>如果 <strong>start</strong> 或 <strong>end</strong> 为负数，那么它将被替换为 <strong>0</strong>。</p>
  </li>
  <li>
    <p>案例：</p>
  </li>
  <li>
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var str = "0123456789";
console.log("start比end大会自动交换，结果同上：", str.substring(5,3)); //34
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="三使用-substr-截取">三、使用 substr() 截取</h2>

<h3 id="1函数说明-2">1，函数说明</h3>

<p>１. <strong>substr</strong> 方法用于返回一个从指定位置开始的指定长度的子字符串。语法如下：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>`stringObject.substr(start, length)`
</code></pre></div></div>

<p><strong>参数说明：</strong></p>

<ul>
  <li>start(必填)：所需的子字符串的起始位置，字符串中的第一个字符的索引为０；</li>
  <li>end(可填):在返回的子字符串中应该包括的字符个数；</li>
</ul>

<ol>
  <li>注意事项：</li>
</ol>

<ul>
  <li>如果 <strong>length</strong> 为 <strong>0</strong> 或负数，将返回一个空字符串。</li>
  <li>如果没有指定 <strong>length</strong>，则子字符串将延续到 <strong>stringObject</strong> 的最后。</li>
  <li>如果 <strong>start</strong> 或 <strong>length</strong> 为负数，那么它将被替换为 <strong>0</strong>。</li>
</ul>

<h4 id="indecof">indecOf</h4>

<p><strong><em>得到指定字符串的下表，如果要检索的字符串值没有出现，则返回－１＇；</em></strong></p>

<hr />

<h2 id="正则表达式一般百度搜索即可">正则表达式（一般百度搜索即可）</h2>

<h4 id="一">一、</h4>

<ol>
  <li>()分组；</li>
  <li>｜管道符；</li>
  <li>？匹配１～１次；</li>
  <li>“*“匹配&gt;0次；</li>
  <li>＋匹配&gt;1次；</li>
  <li>｛｝匹配特定次数。｛３，５｝贪婪匹配（默认匹配最长的字符串），｛３，５｝？非贪婪匹配（在花括号的后面加一个’？‘）；</li>
  <li>建立字符分类，匹配方括号中出现的字符，在方括号内普通的正则表达式的符号不会被解释，加‘^’即为非字符类‘；</li>
  <li>^插入符号，匹配发生在文本开始处；</li>
  <li>$美元符，匹配发生在文本结尾；</li>
  <li>匹配除换行之外的所有字符；</li>
  <li>\转义字符；</li>
</ol>

<h4 id="二">二、</h4>

<ul>
  <li>字符分类
    <ul>
      <li>\d 0~9的任何数字;</li>
      <li>\D 除0~9以外的任何字符;</li>
      <li>\w 任何字母、下划线、或数字字符;</li>
      <li>\W 除字母、下划线、数字以外的任何字符;</li>
      <li>\s 空格、制表符或换行符（可以认为是匹配空白字符）;</li>
      <li>\S 除空格、制表符或换行符以外的任何字符;</li>
    </ul>
  </li>
  <li>方法
    <ul>
      <li>xRegex = re.compile() 创建了一个 regex对象,compile()第二参数可以选择 re.IGNORECASE re.DOTALL re.verbose</li>
      <li>xRegex.search() 返回一个 match 对象</li>
      <li>xRegex.search().group()</li>
      <li>xRegex.findall() 返回一个列表</li>
      <li>xRegex.sub(‘string’, text) 将匹配的字符串 用string替换</li>
    </ul>
  </li>
</ul>
:ET