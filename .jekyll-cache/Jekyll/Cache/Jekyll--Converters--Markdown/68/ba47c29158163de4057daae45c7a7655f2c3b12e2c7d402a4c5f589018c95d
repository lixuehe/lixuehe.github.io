I"B<h1 id="11关于版本控制">1.1关于版本控制</h1>

<h3 id="版本控制是一种记录一个或若干文件内容变化以便将来查阅特定版本修订情况的的系统">版本控制:是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的的系统。</h3>

<p>版本控制系统（VCS）：可以将某个文件回溯到之前的状态，甚至将整个项目都回退到过去某个时间点的状态，你可以比较文件的变化细节，查出最后是谁修改了哪个地方，从而找出导致怪异问题出现的原因，又是谁在何时报告了某个功能缺陷等等。</p>

<h4 id="本地版本控制系统">本地版本控制系统</h4>

<p>**Figure 1. 本地版本控制. **</p>

<p>集中化的版本控制系统（Centralized Version Control Systems，简称 CVCS）</p>

<p>让在不同系统上的开发者协同工作，诸如 CVS、Subversion 以及 Perforce 等，都有一个单一的集中管理的服务器，保存所有文件的修订版本，而协同工作的人们都通过客户端连到这台服务器，取出最新的文件或者提交更新。</p>

<p><strong>Figure 2. 集中化的版本控制.</strong></p>

<p>好处：每个人都可以在一定程度上看到项目中的其他人正在做些什么。
而管理员也可以轻松掌控每个开发者的权限，并且管理一个 CVCS 要远比在各个客户端上维护本地数据库来得轻松容易。</p>

<p>缺点：中央服务器的单点故障。如果宕机一小时，那么在这一小时内，谁都无法提交更新，也就无法协同工作。如果中心数据库所在的磁盘发生损坏，又没有做恰当备份，毫无疑问你将丢失所有数据——包括项目的整个变更历史，只剩下人们在各自机器上保留的单独快照。本地版本控制系统也存在类似问题，只要整个项目的历史记录被保存在单一位置，就有丢失所有历史更新记录的风险。</p>

<p>f分布式版本控制系统（Distributed Version Control System，简称 DVCS）</p>

<p>Git、Mercurial、Bazaar 以及 Darcs 等</p>

<p>客户端并不只提取最新版本的文件快照，而是把代码仓库完整地镜像下来。
这么一来，任何一处协同工作用的服务器发生故障，事后都可以用任何一个镜像出来的本地仓库恢复。
因为每一次的克隆操作，实际上都是一次对代码仓库的完整备份。</p>

<p><strong>Figure 3. 分布式版本控制.</strong></p>

<p>许多这类系统都可以指定和若干不同的远端代码仓库进行交互。籍此，你就可以在同一个项目中，分别和不同工作小组的人相互协作。
你可以根据需要设定不同的协作流程，比如层次模型式的工作流，而这在以前的集中式系统中是无法实现的。</p>

<ul>
  <li>速度</li>
  <li>简单的设计</li>
  <li>对非线性开发模式的强力支持（允许成千上万个并行开发的分支）</li>
  <li>完全分布式</li>
  <li>有能力高效管理类似 Linux 内核一样的超大规模项目（速度和数据量）</li>
</ul>

<h2 id="git-基础">Git 基础</h2>

<h3 id="1直接记录快照而非差异比较">1.直接记录快照，而非差异比较</h3>

<p>Figure 4. 存储每个文件与初始版本的差异.</p>

<p>Figure 5. 存储项目随时间改变的快照.</p>

<h3 id="2近乎所有操作都是本地执行">2.近乎所有操作都是本地执行</h3>

<h3 id="3git-保证完整性">3.Git 保证完整性</h3>

<h3 id="4git-一般只添加数据">4.Git 一般只添加数据</h3>

<h3 id="三种状态重要">三种状态(重要):</h3>

<p>Git 有三种状态，你的文件可能处于其中之一：已提交（committed）、已修改（modified）和已暂存（staged）。</p>

<p>Git 项目的三个工作区域的概念：Git 仓库、工作目录以及暂存区域。</p>

<p>Figure 6. 工作目录、暂存区域以及 Git 仓库</p>

<p>Git 仓库目录是 Git 用来保存项目的元数据和对象数据库的地方。 这是 Git 中最重要的部分，从其它计算机克隆仓库时，拷贝的就是这里的数据。</p>

<p>工作目录是对项目的某个版本独立提取出来的内容。 这些从 Git 仓库的压缩数据库中提取出来的文件，放在磁盘上供你使用或修改。</p>

<p>暂存区域是一个文件，保存了下次将提交的文件列表信息，一般在 Git 仓库目录中。 有时候也被称作`‘索引’’，不过一般说法还是叫暂存区域。</p>

<p><em>基本的 Git 工作流程如下：</em></p>

<ol>
  <li>在工作目录中修改文件。</li>
  <li>暂存文件，将文件的快照放入暂存区域。</li>
  <li>提交更新，找到暂存区域的文件，将快照永久性存储到 Git 仓库目录。</li>
</ol>

<p>如果 Git 目录中保存着特定版本的文件，就属于已提交状态。 如果作了修改并已放入暂存区域，就属于已暂存状态。 如果自上次取出后，作了修改但还没有放到暂存区域，就是已修改状态。 在<a href="https://git-scm.com/book/zh/v2/ch00/ch02-git-basics">Git 基础</a>一章，你会进一步了解这些状态的细节，并学会如何根据文件状态实施后续操作，以及怎样跳过暂存直接提交。</p>

<h1 id="--命令行">- 命令行</h1>

<p>Git 有多种使用方式。
你可以使用原生的命令行模式，也可以使用 GUI 模式，这些 GUI 软件也能提供多种功能。在命令行模式下你才能执行 Git 的 <strong>所有</strong> 命令，而大多数的 GUI 软件只实现了 Git 所有功能的一个子集以降低操作难度。</p>

<p>######</p>

:ET